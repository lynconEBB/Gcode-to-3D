from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
import sys
from Modules.OpenGLWindow import *
import webbrowser
from Modules.Main import *
from Modules.Remesh import *
from Modules.GcodePreview import *
from Modules.Dialogs import *

class MainWindow(QMainWindow):

    def __init__(self,parent=None):
        super().__init__(parent)
        self.title = "GCode Converter"
        self.width = 680
        self.height = 500

        #---------------------File/dir Variables----------------------
        self.setWindowIcon(QIcon("../Icons/GSTicon.png"))
        self.default_ply_dir = "/home/lyncon/3d-printer-parser/Files/point_cloud.ply"
        self.gcode_file = ""
        self.stl_file = ""
        self.default_texture_file = "/home/lyncon/3d-printer-parser/Files/dist_map.obj"
        self.default_output_file = "/home/lyncon/3d-printer-parser/Files/test_out.obj"
        self.image_dir = "/home/lyncon/3d-printer-parser/Images"
        self.input_dir = "/home/lyncon/3d-printer-parser/Gcodes"
        self.save_file = False

        #------------------Windows-----------------------------------
        self.opengl_win = GLWidget(self)
        self.gcode_preview_win = GcodePreviewWidget()
        self.remesh_win = RemeshWindow()
        self.status_bar = self.statusBar()
        self.config_win = ConfigurationWindow(self.default_ply_dir,self.default_output_file,self.image_dir,self.default_texture_file)
        self.GecodeConverterHelper = QDialog()
        self.ui = HelpWindow()
        self.ui.setupUi(self.GecodeConverterHelper)
        self.information_win = InformationWindow()
        self.dock_files = QDockWidget("File Information",self)
        self.init_ui()

    def init_ui(self):
        self.create_dock()
        self.create_menu()
        self.create_tool_bar()
        self.setCentralWidget(self.opengl_win)
        self.setWindowTitle(self.title)
        self.resize(self.width,self.height)
        self.showMaximized()

    def create_dock(self):
        self.addDockWidget(Qt.BottomDockWidgetArea, self.dock_files)
        self.listWidget = QListWidget()
        self.text_font = QFont("Times", 12,QFont.Bold)
        self.listWidget.setFont(self.text_font)
        self.listWidget.addItem("No Gcode File imported !")
        self.listWidget.addItem("Default OBJ file: "+self.default_output_file)
        self.listWidget.addItem("Default PLY file: "+self.default_ply_dir)
        self.listWidget.addItem("Images Directory: "+self.image_dir)
        self.listWidget.addItem("Default Distance Map OBJ file: "+self.default_texture_file)
        self.dock_files.setWidget(self.listWidget)
        self.dock_files.setFloating(False)

    def create_menu(self):
        main_menu = self.menuBar()
        # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        file_menu = main_menu.addMenu("File")

        import_action = QAction(QIcon("../Icons/import.png"), "Import Gcode", self)
        import_action.setShortcut("Ctrl+N")
        import_action.setStatusTip("Import a Gcode File")
        file_menu.addAction(import_action)
        import_action.triggered.connect(self.import_file)

        export_action = QAction(QIcon("../Icons/export.png"), "Export STL", self)
        export_action.setShortcut("Ctrl+S")
        export_action.setStatusTip("Export STL Generated by Gcode")
        file_menu.addAction(export_action)
        export_action.triggered.connect(self.export_file)

        config_action = QAction(QIcon("../Icons/config.png"), "Configuration", self)
        config_action.setShortcut("Ctrl+C")
        config_action.setStatusTip("Open Configurations Window")
        file_menu.addAction(config_action)
        config_action.triggered.connect(self.configure)

        exit_action = QAction(QIcon("../Icons/quit.png"), "Exit", self)
        exit_action.setShortcut("Ctrl+Q")
        exit_action.setStatusTip("Exit From Gcode Converter")
        file_menu.addAction(exit_action)
        exit_action.triggered.connect(self.close_app)
        # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        view_menu = main_menu.addMenu("View")
        
        top_action=QAction(QIcon(), "Top View", self)
        top_action.setShortcut("Ctrl+U")
        top_action.setStatusTip("Visualize over 3D Model")
        view_menu.addAction(top_action)
        top_action.triggered.connect(self.opengl_win.setTopView)

        bot_action=QAction(QIcon(), "Bottom View", self)
        bot_action.setShortcut("Ctrl+B")
        bot_action.setStatusTip("Visualize the bottom of 3D Model")
        view_menu.addAction(bot_action)
        bot_action.triggered.connect(self.opengl_win.setBottomView)

        right_action=QAction(QIcon(), "Right View", self)
        right_action.setShortcut("Ctrl+R")
        right_action.setStatusTip("Right View of 3D Model")
        view_menu.addAction(right_action)
        right_action.triggered.connect(self.opengl_win.setRightView)

        left_action=QAction(QIcon(), "Left View", self)
        left_action.setShortcut("Ctrl+L")
        left_action.setStatusTip("Left View of 3D Model")
        view_menu.addAction(left_action)
        left_action.triggered.connect(self.opengl_win.setLeftView)

        point_action= QAction(QIcon("../Icons/cloud.jpg"), "Point Cloud View", self)
        point_action.setShortcut("Ctrl+P")
        point_action.setStatusTip("View Point cloud 3d Model")
        view_menu.addAction(point_action)

        layer_action = QAction(QIcon("../Icons/layer.png"), "View layers", self)
        layer_action.setShortcut("Ctrl+L")
        layer_action.setStatusTip("View Simulation of each layer print")
        view_menu.addAction(layer_action)
        layer_action.triggered.connect(self.show_layers)
        # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        tool_menu = main_menu.addMenu("Tool")
        
        compare_action= QAction(QIcon("../Icons/compare.png"), "Compare STL", self)
        compare_action.setShortcut("Ctrl+Y")
        compare_action.setStatusTip("Compare Generated STL with original STL")
        tool_menu.addAction(compare_action)
        compare_action.triggered.connect(self.compare)

        remesh_action= QAction(QIcon("../Icons/remesh.png"), "Remesh Gcode", self)
        remesh_action.setShortcut("Ctrl+R")
        remesh_action.setStatusTip("Generate a new STL with new configurations")
        tool_menu.addAction(remesh_action)
        remesh_action.triggered.connect(self.remesh)

        delete_action = QAction(QIcon("../Icons/delete.png"), "Delete Mesh", self)
        delete_action.setShortcut("Delete")
        delete_action.setStatusTip("Delete current Mesh")
        tool_menu.addAction(delete_action)
        delete_action.triggered.connect(self.delete_obj)

        #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        help_menu = main_menu.addMenu("Help")

        help_action=QAction(QIcon(), "Help Window", self)
        help_action.setShortcut("Ctrl+H")
        help_action.setStatusTip("Open Help Window for Beginners Users")
        help_menu.addAction(help_action)
        help_action.triggered.connect(self.GecodeConverterHelper.show)

        documentation_action=QAction(QIcon(), "Online Documentation", self)
        documentation_action.setShortcut("Ctrl+P")
        documentation_action.setStatusTip("Open Official documentation on Browser")
        help_menu.addAction(documentation_action)
        documentation_action.triggered.connect(self.open_documentation)

        information_action=QAction(QIcon(), "Software Information", self)
        information_action.setShortcut("Ctrl+I")
        information_action.setStatusTip("Show current software information")
        help_menu.addAction(information_action)
        information_action.triggered.connect(self.information_win.show)

    def create_tool_bar(self):
        tool_bar = QToolBar(self)
        self.addToolBar(Qt.LeftToolBarArea, tool_bar)
        tool_bar.setIconSize(QSize(40, 40))
        
        import_action=QAction(QIcon("../Icons/import.png"), "Import", self)
        import_action.setStatusTip("Import a Gcode File")
        tool_bar.addAction(import_action)
        import_action.triggered.connect(self.import_file)

        export_action = QAction(QIcon("../Icons/export.png"), "Export", self)
        export_action.setStatusTip("Export a STL File")
        tool_bar.addAction(export_action)
        export_action.triggered.connect(self.export_file)

        tool_bar.addSeparator()

        compare_action = QAction(QIcon("../Icons/compare.png"), "Compare STL", self)
        compare_action.setStatusTip("Compare Generated STL with original STL")
        tool_bar.addAction(compare_action)
        compare_action.triggered.connect(self.compare)

        remesh_action = QAction(QIcon("../Icons/remesh.png"), "Remesh Gcode", self)
        remesh_action.setStatusTip("Generate a new STL with new configurations")
        tool_bar.addAction(remesh_action)
        remesh_action.triggered.connect(self.remesh)

        delete_action = QAction(QIcon("../Icons/delete.png"), "Delete Mesh", self)
        delete_action.setShortcut("Delete")
        delete_action.setStatusTip("Delete current Mesh")
        tool_bar.addAction(delete_action)
        delete_action.triggered.connect(self.delete_obj)

        tool_bar.addSeparator()

        point_action = QAction(QIcon("../Icons/cloud.jpg"), "Point Cloud View", self)
        point_action.setStatusTip("View Point cloud 3d Model")
        tool_bar.addAction(point_action)

    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~FILE~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    def close_app(self):
        reply = QMessageBox.question(self, "Quit","Are you sure to quit Gcode Converter?", QMessageBox.Yes |QMessageBox.No, QMessageBox.No)

        if reply == QMessageBox.Yes:
            self.close()

    def import_file(self):
        fname = QFileDialog.getOpenFileName(self, "Import Gcode",self.input_dir,"Gcodes(*.gcode)")
        if fname[0] != "":
            self.gcode_preview_win.win_opengl.set_gcode_file(fname[0])
            self.gcode_preview_win.update_list()
            self.gcode_preview_win.show()
            self.gcode_preview_win.ok.connect(self.set_gcode)

    def set_gcode(self,file):
        self.gcode_file = file
        self.listWidget.takeItem(0)
        self.listWidget.insertItem(0, "Current Gcode File: " + self.gcode_file)
        self.gcode_preview_win.close()

    def export_file(self):
        fname = QFileDialog.getSaveFileName(self, "Save STL file",".", "3d Objects(*.stl)")
        if fname[0] != "":
            self.stl_file = fname[0]
            Main.export(self.default_output_file,self.stl_file)

    def configure(self):
        if self.config_win.exec_():
            self.default_ply_dir = self.config_win.ply.text()
            self.listWidget.takeItem(2)
            self.listWidget.insertItem(2, "Current PLY file: " + self.default_ply_dir)
            self.default_output_file= self.config_win.output.text()
            self.listWidget.takeItem(1)
            self.listWidget.insertItem(1, "Current OBJ file: " + self.default_output_file)
            self.image_dir = self.config_win.image.text()
            self.listWidget.takeItem(3)
            self.listWidget.insertItem(3, "Images Directory: " + self.image_dir)
            self.default_texture_file = self.config_win.texture.text()
            self.listWidget.takeItem(4)
            self.listWidget.insertItem(4, "Current Distance Map OBJ file: " + self.default_texture_file)

        self.config_win.ply.setText(self.default_ply_dir)
        self.config_win.texture.setText(self.default_texture_file)
        self.config_win.output.setText(self.default_output_file)
        self.config_win.image.setText(self.image_dir)

    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~HELP~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    @staticmethod
    def open_documentation():
        webbrowser.open("https://git.pti.org.br/lasse/3d-printer-parser")

    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~TOOLS~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    def remesh(self):
        self.remesh_win.save.connect(self.set_save)
        if self.remesh_win.exec_():
            if self.gcode_file != "" and self.default_output_file != "" and self.default_ply_dir != "" and self.image_dir != "":
                self.remesh_thread = MainThread(self.gcode_file, self.default_output_file, self.default_ply_dir,self.image_dir,self.save_file,self.remesh_win.skirt_h.value())
                self.remesh_thread.start()
                self.remesh_thread.finish.connect(self.show_obj)
                self.remesh_thread.finish2.connect(self.update_list)
                self.remesh_thread.finish2.connect(self.opengl_win.update)
                item = QListWidgetItem("Remesh Process is Running... wait!")
                item.setBackground(QColor("#ff9933"))
                item.setIcon(QIcon("../Icons/remesh.png"))
                self.listWidget.addItem(item)
            else:
                QMessageBox.warning(self, "Error", "Some file is missing!!")

    def set_save(self,save):
        self.save_file = save

    def update_list(self):
        self.listWidget.takeItem(5)

    def delete_obj(self):
        self.opengl_win.paint = False
        if os.path.isfile(self.default_output_file):
            os.remove(self.default_output_file)
        if os.path.isfile(self.default_texture_file):
            os.remove(self.default_texture_file)

    def compare(self):
        fname = QFileDialog.getOpenFileName(self, "Import STL", self.input_dir, "STL(*.stl)")
        if fname[0] != "":
            Remesh.measure_diff(fname[0],self.default_output_file,self.default_texture_file)
            self.show_dist_map()

    def show_obj(self):
        self.opengl_win.set_obj_file(self.default_output_file)

    def show_dist_map(self):
        self.opengl_win.set_obj_file(self.default_texture_file)

    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~VIEW~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    def show_layers(self):
        layerWindow = LayersWindow(self.image_dir)
        if layerWindow.exec_():
            pass

App = QApplication(sys.argv)
window = MainWindow()
window.show()
sys.exit(App.exec())